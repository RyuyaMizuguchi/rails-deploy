AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VpcCidrBlock:
    Type: String
    Default: 172.18.0.0/16
  PublicSubnetCidrBlockA:
    Type: String
    Default: 172.18.0.0/24
  PublicSubnetCidrBlockC:
    Type: String
    Default: 172.18.1.0/24
  PrivateSubnetCidrBlockA:
    Type: String
    Default: 172.18.3.0/24
  PrivateSubnetCidrBlockC:
    Type: String
    Default: 172.18.4.0/24
  Ec2ImageId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  Ec2InstanceType:
    Type: String
    Default: t2.micro
  Ec2KeyName:
    Type: String
    Default: rails-deploy-ec2-user

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidrBlock
          - PublicSubnetCidrBlockA
          - PublicSubnetCidrBlockC
          - PrivateSubnetCidrBlockA
          - PrivateSubnetCidrBlockC
      -
        Label:
          default: "Amazon EC2 Configuration"
        Parameters:
          - Ec2ImageId
          - Ec2InstanceType
          - Ec2KeyName

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        -
          Key: Name
          Value: !Ref AWS::StackName
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetCidrBlockA
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-a
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetCidrBlockC
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-c
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetCidrBlockA
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-a
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetCidrBlockC
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-c
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Ref AWS::StackName
      DBSubnetGroupName: !Ref AWS::StackName
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId : !Ref InternetGateway
      VpcId: !Ref VPC
  RouteTableForPublicSubnet:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public
  RouteForPublicSubnet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  AssocciateRouteTableForPublicSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetA
  AssocciateRouteTableForPublicSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTableForPublicSubnet
      SubnetId: !Ref PublicSubnetC
  SecurityGroupForVpc:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-vpc
      GroupDescription: !Sub ${AWS::StackName}-vpc
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
  SecurityGroupIngressForVpc:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt SecurityGroupForVpc.GroupId
      IpProtocol: -1
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !GetAtt SecurityGroupForVpc.GroupId
  SecurityGroupForWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-web
      GroupDescription: !Sub ${AWS::StackName}-web
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-web
  SecurityGroupForSsh:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ssh
      GroupDescription: !Sub ${AWS::StackName}-ssh
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ssh
  WebAppServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Ec2ImageId
      InstanceType: !Ref Ec2InstanceType
      KeyName: !Ref Ec2KeyName
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnetA # Network interfaces and an instance-level subnet ID may not be specified on the same request
          GroupSet:
            - !Ref SecurityGroupForSsh
            - !Ref SecurityGroupForVpc
            - !Ref SecurityGroupForWeb
          AssociatePublicIpAddress: true
          DeviceIndex : 0 # Property DeviceIndex cannot be empty.
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-webapp
      UserData:
        Fn::Base64: |
          #!/bin/bash
          eval "$(ssh-agent)"

          sudo timedatectl set-timezone Asia/Tokyo

          sudo yum update -y

          sudo amazon-linux-extras install -y nginx1

          sudo yum install -y git gcc gcc-c++ make openssl-devel readline-devel zlib-devel postgresql-devel

          curl -fsSL https://rpm.nodesource.com/setup_14.x | sudo bash - && sudo yum install -y nodejs
          curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo && sudo yum install -y yarn

          # user
          sudo sed -i -e "s%user nginx;%user webapp;%" /etc/nginx/nginx.conf

          # document root not fot capstrano
          sudo sed -i -e "s%/usr/share/nginx/html;%/home/webapp/rails-deploy/public;%" /etc/nginx/nginx.conf

          ## document root for capstrano
          #sudo sed -i -e "s%/usr/share/nginx/html;%/home/webapp/rails-deploy/current/public;%" /etc/nginx/nginx.conf

          # not fot capstrano
          sudo cat > /etc/nginx/conf.d/puma.conf <<EOF
          upstream puma {
              server unix:/home/webapp/rails-deploy/tmp/sockets/puma.sock;
          }
          EOF

          ## for capstrano
          #sudo cat > /etc/nginx/conf.d/puma.conf <<EOF
          #upstream puma {
          #    server unix:/home/webapp/rails-deploy/current/tmp/sockets/puma.sock;
          #}
          #EOF

          sudo cat > /etc/nginx/default.d/puma.conf <<\EOF
          try_files $uri @app;

          location @app {
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header Host $http_host;
              proxy_pass http://puma;
          }
          EOF

          # UMASK
          sudo sed -i -e "s/ 077/ 022/" /etc/login.defs

          sudo useradd webapp
  ElasticIpForWebAppServer:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref WebAppServer
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-webapp
